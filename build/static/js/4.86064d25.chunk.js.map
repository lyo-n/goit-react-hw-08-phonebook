{"version":3,"sources":["components/contactRender/contactRender.module.css","components/contactForm/contactForm.module.css","components/filter/filter.module.css","components/contacts/contacts.module.css","components/contactItem/contactItem.module.css","redux/contacts/actions.jsx","components/contactForm/contactForm.jsx","components/contactForm/contactFormContainer.jsx","components/filter/filter.jsx","components/filter/filterContainer.jsx","components/contactItem/contactItem.jsx","components/contactItem/contactItemContainer.jsx","components/contacts/contacts.jsx","components/contacts/contactsContainer.jsx","components/contactRender/contactRender.jsx"],"names":["module","exports","axios","defaults","baseURL","expAction","fetchContacts","dispatch","actionOperation","fetchContactRequest","get","then","data","fetchContactSuccess","catch","error","fetchContactError","addContact","name","number","addContactRequest","post","addContactSuccess","addContactError","deleteContact","id","removeContactRequest","delete","removeContactSuccess","removeContactError","ContactForm","state","useDispatch","useState","setName","setNumber","onSubmit","e","preventDefault","console","log","arrayItems","contacts","find","contact","alert","actions","className","styles","form","formBlock","label","TextField","inpt","type","value","onChange","target","Button","variant","color","style","borderRadius","padding","connect","Filter","changeOnFilter","searchBlock","mapDispatchToProps","changeFilter","selectors","getFilter","ContactItem","removeOnContact","item","btn","onClick","ownProps","itemsStyles","enter","enterActive","exit","exitActive","ContactList","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","selectContacts","ContactsRender","this","props","fetchOnContacts","contactList","length","Component","getContacts","dicpatch"],"mappings":"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","file":"static/js/4.86064d25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"contactRender_contactList__3g5qf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactForm_form__3-4wz\",\"formBlock\":\"contactForm_formBlock__24VQ8\",\"label\":\"contactForm_label__22Iif\",\"inpt\":\"contactForm_inpt__3StwG\",\"btn\":\"contactForm_btn__34w0L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBlock\":\"filter_searchBlock__cLWs_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"contacts_list__3UOWx\",\"btn\":\"contacts_btn__1W7Bg\",\"enter\":\"contacts_enter__2qSKm\",\"enterActive\":\"contacts_enterActive__1cnw8\",\"exit\":\"contacts_exit__1S6sq\",\"exitActive\":\"contacts_exitActive__2tLt5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"contactItem_item__1q5Ee\",\"btn\":\"contactItem_btn__1k1LU\"};","import axios from 'axios';\r\nimport actionOperation from './actionOperetion';\r\n  \r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(actionOperation.fetchContactRequest());\r\n      axios.get('contacts')\r\n      .then(({ data }) => dispatch(actionOperation.fetchContactSuccess(data)))\r\n      .catch(error => dispatch(actionOperation.fetchContactError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n    dispatch(actionOperation.addContactRequest());\r\n    axios\r\n      .post('contacts', {\r\n        name,\r\n        number,\r\n      })\r\n      .then(({ data }) => dispatch(actionOperation.addContactSuccess(data)))\r\n      .catch(error => dispatch(actionOperation.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n    dispatch(actionOperation.removeContactRequest());\r\n      axios\r\n      .delete(`contacts/${id}`)\r\n      .then(() => dispatch(actionOperation.removeContactSuccess(id)))\r\n      .catch(error => dispatch(actionOperation.removeContactError(error)));\r\n};\r\n\r\nconst expAction = {\r\n    fetchContacts,\r\n    addContact,\r\n    deleteContact\r\n};\r\n\r\nexport default expAction;\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport styles from './contactForm.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport actions from '../../redux/contacts/actions';\r\n\r\nconst ContactForm = ({state}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [name, setName] = useState('');\r\n    const changeName= ({target}) => setName(target.value); \r\n\r\n    const [number, setNumber] = useState('');\r\n    const changeNumber = ({target}) => setNumber(target.value);\r\n\r\n    const inputSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log('Submitted!');\r\n        const { arrayItems } = state.contacts;\r\n        if (arrayItems && arrayItems.find(contact => name === contact.name)) {\r\n            alert('Такой пользователь уже есть в Вашей телефонной книге!!!');\r\n        } else {\r\n            dispatch(actions.addContact(name, number));\r\n        }\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n     \r\n        \r\n    return (            \r\n            <form onSubmit={inputSubmit} className={styles.form}> \r\n                <div className={styles.formBlock}>\r\n                <label className={styles.label}>\r\n                    Name\r\n                    <TextField  className={styles.inpt}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={name}     \r\n                            onChange={changeName}                              \r\n                    />\r\n                </label>\r\n                <label className={styles.label}>\r\n                    Number\r\n                    <TextField  className={styles.inpt}\r\n                            type=\"text\"\r\n                            name=\"number\"\r\n                            value={number}\r\n                            onChange={changeNumber}\r\n                    />\r\n                </label>\r\n                </div>\r\n                <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ borderRadius: 4, padding: 4 }}\r\n                type=\"submit\"\r\n                >\r\n                    Add contact\r\n                </Button>\r\n            </form>\r\n    );\r\n};\r\n\r\nexport default ContactForm;\r\n","import { connect } from 'react-redux';\r\nimport ContactForm from './contactForm';\r\n\r\nconst mapStateToProps = state => ({\r\n    state,\r\n  });\r\n  \r\nexport default connect(mapStateToProps)(ContactForm);\r\n  \r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport styles from './filter.module.css';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nconst Filter = ({value, changeOnFilter}) => (  \r\n    <div className={styles.searchBlock}>\r\n        Find contacts by name\r\n          <TextField variant=\"standard\" type=\"text\" value={value} onChange = {(e) => changeOnFilter(e.target.value)}/>\r\n    </div>\r\n)\r\n\r\nFilter.propTypes = {\r\n    value: propTypes.string.isRequired,\r\n    changeOnFilter: propTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n\r\n","import { connect } from 'react-redux';\r\nimport actionOperation from '../../redux/contacts/actionOperetion';\r\nimport selectors from '../../redux/contacts/selectors';\r\nimport Filter from './filter';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    value: selectors.getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  changeOnFilter: actionOperation.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport styles from './contactItem.module.css';\r\nimport propTypes from 'prop-types';\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\nconst ContactItem = \r\n    ({ contact: {name, number }, removeOnContact }) => {\r\n            return(\r\n            <li className={styles.item}>\r\n            {name}: {number}\r\n            {<Button \r\n                className={styles.btn} \r\n                type=\"button\" \r\n                variant=\"outlined\" color=\"secondary\"\r\n                onClick={removeOnContact}>\r\n                    Delete\r\n            </Button>}\r\n        </li>\r\n        );\r\n    };\r\n\r\nContactItem.propTypes = {\r\n    removeOnContact: propTypes.func.isRequired,\r\n    contacts: propTypes.arrayOf(propTypes.shape({\r\n        id: propTypes.string.isRequired,\r\n        name: propTypes.string.isRequired,\r\n        number: propTypes.string.isRequired,\r\n        }),\r\n    ),\r\n};\r\nexport default ContactItem;\r\n","import { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/actions';\r\nimport ContactItem from '../contactItem/contactItem';\r\n\r\nconst mapDispatchToProps  = (dispatch, ownProps) =>({\r\n    removeOnContact: () =>\r\n    dispatch(actions.deleteContact(ownProps.contact.id)),\r\n});\r\n      \r\nexport default connect(null, mapDispatchToProps)(ContactItem);\r\n\r\n","import React from 'react';\r\nimport styles from './contacts.module.css';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport ContactItem from '../contactItem/contactItemContainer';\r\nimport propTypes from 'prop-types';\r\n\r\nconst itemsStyles = {\r\n    enter: styles.enter,\r\n    enterActive: styles.enterActive,\r\n    exit: styles.exit,\r\n    exitActive: styles.exitActive,\r\n};\r\n\r\nconst ContactList = ({contacts}) => {\r\n    return(\r\n     <TransitionGroup component=\"ul\">\r\n       {contacts && contacts.map(contact => (\r\n        <CSSTransition key={contact.id} timeout={250} classNames={itemsStyles}>\r\n           <ContactItem contact={contact} />\r\n        </CSSTransition>\r\n       ))} \r\n     </TransitionGroup>\r\n    );\r\n};  \r\n\r\nContactList.propTypes = {\r\n    contacts: propTypes.arrayOf(propTypes.shape({\r\n        name: propTypes.string.isRequired,\r\n        number: propTypes.string.isRequired,\r\n        id: propTypes.string.isRequired,\r\n    }),),\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport selectors from '../../redux/contacts/selectors';\r\nimport ContactList from '../contacts/contacts';\r\n\r\nconst mapStateToProps = state => {\r\n    if (state.contacts) {\r\n      return {\r\n        contacts: selectors.selectContacts(state),\r\n      };\r\n    }\r\n  };\r\n  \r\n  export default connect(mapStateToProps)(ContactList);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport selectors from '../../redux/contacts/selectors';\r\nimport actions from '../../redux/contacts/actions';\r\nimport styles from './contactRender.module.css';\r\nimport ContactForm from '../contactForm/contactFormContainer';\r\nimport Filter from '../filter/filterContainer';\r\nimport ContactList from '../contacts/contactsContainer';\r\n\r\nclass ContactsRender extends Component {\r\n    componentDidMount() {\r\n      this.props.fetchOnContacts();\r\n    }\r\n  \r\n    render() {\r\n        const { contacts } = this.props;\r\n        return (\r\n          <div className={styles.contactList}>\r\n            <ContactForm />\r\n            {contacts && contacts.length > 1 && <Filter />}\r\n            <h2>Contacts</h2>\r\n            <ContactList />\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  const mapStateToProps = state => {\r\n    return {\r\n      contacts: selectors.getContacts(state),\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = dicpatch => ({\r\n    fetchOnContacts: () => dicpatch(actions.fetchContacts()),\r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(ContactsRender);\r\n  "],"sourceRoot":""}